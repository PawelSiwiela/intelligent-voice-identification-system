function [normalized_data, norm_params] = normalizeFeatures(data_matrix)
% NORMALIZEFEATURES Normalizacja cech do zakresu [-1, 1]
%
% Sk≈Çadnia:
%   [normalized_data, norm_params] = normalizeFeatures(data_matrix)
%
% Argumenty:
%   data_matrix - macierz danych [pr√≥bki √ó cechy]
%
% Zwraca:
%   normalized_data - znormalizowana macierz [pr√≥bki √ó cechy]
%   norm_params - struktura zawierajƒÖca parametry normalizacji (do p√≥≈∫niejszego u≈ºycia)
%     - scaling_factors: warto≈õci u≈ºyte do skalowania ka≈ºdej cechy
%     - min_values: minimalne warto≈õci po normalizacji
%     - max_values: maksymalne warto≈õci po normalizacji

% Inicjalizacja macierzy wynikowej
normalized_data = zeros(size(data_matrix));

% Parametry normalizacji do p√≥≈∫niejszego u≈ºycia
norm_params = struct();
scaling_factors = zeros(1, size(data_matrix, 2));

logInfo('üî¢ Normalizacja %d cech do zakresu [-1, 1]...', size(data_matrix, 2));

% Normalizacja ka≈ºdej cechy osobno
for col = 1:size(data_matrix, 2)
    % Pobranie warto≈õci dla aktualnej cechy
    feature_values = data_matrix(:, col);
    
    % Znajd≈∫ maksymalnƒÖ warto≈õƒá bezwzglƒôdnƒÖ w kolumnie (czynnik skalujƒÖcy)
    max_abs_value = max(abs(feature_values));
    
    % Zabezpieczenie przed dzieleniem przez zero
    if max_abs_value == 0 || isnan(max_abs_value)
        max_abs_value = eps;  % Najmniejsza dodatnia liczba w MATLAB
        logWarning('‚ö†Ô∏è Cecha %d zawiera tylko zera lub warto≈õci NaN - u≈ºywam eps jako dzielnik', col);
    end
    
    % Zapisz czynnik skalujƒÖcy do p√≥≈∫niejszego u≈ºycia
    scaling_factors(col) = max_abs_value;
    
    % Normalizacja cechy przez maksymalnƒÖ warto≈õƒá bezwzglƒôdnƒÖ
    normalized_data(:, col) = feature_values / max_abs_value;
end

% Obs≈Çuga warto≈õci niesko≈Ñczonych i NaN
if any(~isfinite(normalized_data(:)))
    logWarning('‚ö†Ô∏è Wykryto niesko≈Ñczone warto≈õci po normalizacji - zastƒôpujƒô zerami');
    
    % Zamiana NaN i Inf na 0
    normalized_data(~isfinite(normalized_data)) = 0;
end

% Obliczenie zakres√≥w po normalizacji
min_values = min(normalized_data, [], 1);
max_values = max(normalized_data, [], 1);

% Zapisanie parametr√≥w normalizacji
norm_params.scaling_factors = scaling_factors;
norm_params.min_values = min_values;
norm_params.max_values = max_values;

logSuccess('‚úÖ Normalizacja zako≈Ñczona. Zakres warto≈õci: [%.4f, %.4f]', ...
    min(min_values), max(max_values));
end