function [best_net, best_tr, results] = voiceRecognition(config)
% VOICERECOGNITION G≈Ç√≥wna funkcja do rozpoznawania g≈Çosu i por√≥wnywania sieci neuronowych
%
% Sk≈Çadnia:
%   [best_net, best_tr, results] = voiceRecognition(config)
%
% Argumenty:
%   config - struktura konfiguracyjna zawierajƒÖca:
%     .noise_level - poziom szumu (domy≈õlnie 0.1)
%     .num_samples - liczba pr√≥bek na kategoriƒô (domy≈õlnie 5)
%     .use_vowels - czy u≈ºywaƒá samog≈Çosek (domy≈õlnie true)
%     .use_complex - czy u≈ºywaƒá komend z≈Ço≈ºonych (domy≈õlnie true)
%     .normalize_features - czy normalizowaƒá cechy (domy≈õlnie true)
%     .scenario - scenariusz trenowania ('vowels', 'commands', 'all', domy≈õlnie 'all')
%     .max_trials - liczba pr√≥b w random search (domy≈õlnie 20)
%     .golden_accuracy - pr√≥g dok≈Çadno≈õci dla "z≈Çotych parametr√≥w" (domy≈õlnie 0.95)
%     .show_visualizations - czy pokazywaƒá wizualizacje (domy≈õlnie true)
%     .early_stopping - czy zatrzymaƒá wcze≈õniej po znalezieniu dobrych parametr√≥w (domy≈õlnie true)
%     .optimization_method - metoda optymalizacji ('random' lub 'genetic', domy≈õlnie 'random')
%     .population_size - rozmiar populacji dla algorytmu genetycznego (domy≈õlnie 10)
%     .num_generations - liczba generacji dla algorytmu genetycznego (domy≈õlnie 4)
%     .mutation_rate - wsp√≥≈Çczynnik mutacji (domy≈õlnie 0.2)
%     .crossover_rate - wsp√≥≈Çczynnik krzy≈ºowania (domy≈õlnie 0.8)
%     .elite_count - liczba osobnik√≥w elitarnych (domy≈õlnie 2)
%     .selection_method - metoda selekcji ('tournament' lub 'roulette', domy≈õlnie 'tournament')
%     .tournament_size - rozmiar turnieju (domy≈õlnie 3)
%
% Zwraca:
%   best_net - najlepsza wytrenowana sieƒá neuronowa
%   best_tr - dane z procesu treningu najlepszej sieci
%   results - wyniki oceny sieci i por√≥wnania

% =========================================================================
% INICJALIZACJA I USTAWIENIA DOMY≈öLNE
% =========================================================================

% Ustaw globalnƒÖ konfiguracjƒô dla systemu logowania
global CURRENT_CONFIG;
CURRENT_CONFIG = config;

% Parametry domy≈õlne
if nargin < 1
    config = struct();
end

% Parametry podstawowe
default_config = struct(...
    'noise_level', 0.1, ...
    'num_samples', 5, ...
    'use_vowels', true, ...
    'use_complex', true, ...
    'normalize_features', true, ...
    'scenario', 'all', ...
    'max_trials', 20, ...
    'golden_accuracy', 0.95, ...
    'show_visualizations', true, ...
    'early_stopping', true, ...
    'optimization_method', 'random');

% Parametry algorytmu genetycznego
genetic_config = struct(...
    'population_size', 10, ...
    'num_generations', 4, ...
    'mutation_rate', 0.2, ...
    'crossover_rate', 0.8, ...
    'elite_count', 2, ...
    'selection_method', 'tournament', ...
    'tournament_size', 3);

% Uzupe≈Çnienie brakujƒÖcych p√≥l podstawowych
field_names = fieldnames(default_config);
for i = 1:length(field_names)
    field = field_names{i};
    if ~isfield(config, field)
        config.(field) = default_config.(field);
    end
end

% Uzupe≈Çnienie p√≥l algorytmu genetycznego, je≈õli wybrana jest ta metoda
if strcmp(config.optimization_method, 'genetic')
    field_names = fieldnames(genetic_config);
    for i = 1:length(field_names)
        field = field_names{i};
        if ~isfield(config, field)
            config.(field) = genetic_config.(field);
        end
    end
    
    % Informacja o konfiguracji algorytmu genetycznego
    logInfo('üß¨ Optymalizacja algorytmem genetycznym: populacja=%d, generacje=%d', ...
        config.population_size, config.num_generations);
    logInfo('üß¨ Parametry genetyczne: mutacja=%.2f, krzy≈ºowanie=%.2f, elita=%d, selekcja=%s', ...
        config.mutation_rate, config.crossover_rate, config.elite_count, config.selection_method);
else
    logInfo('üîç Optymalizacja metodƒÖ Random Search: pr√≥by=%d', config.max_trials);
end

% Dostosowanie parametr√≥w na podstawie scenariusza
switch config.scenario
    case 'vowels'
        config.use_vowels = true;
        config.use_complex = false;
        logInfo('üîä Scenariusz: tylko samog≈Çoski');
    case 'commands'
        config.use_vowels = false;
        config.use_complex = true;
        logInfo('üîä Scenariusz: tylko komendy z≈Ço≈ºone');
    case 'all'
        config.use_vowels = true;
        config.use_complex = true;
        logInfo('üîä Scenariusz: samog≈Çoski i komendy z≈Ço≈ºone');
    otherwise
        logWarning('‚ö†Ô∏è Nieznany scenariusz: %s. U≈ºywam wszystkich danych.', config.scenario);
        config.use_vowels = true;
        config.use_complex = true;
        config.scenario = 'all';
end

% Inicjalizacja struktury wynik√≥w
results = struct(...
    'config', config, ...
    'comparison', struct(), ...
    'total_time', 0);

total_time = tic;

% =========================================================================
% KROK 1: WCZYTYWANIE DANYCH
% =========================================================================

logInfo('üîÑ Krok 1: Wczytywanie danych audio...');
step1_time = tic;

try
    % Mapowanie scenariusza na parametry wczytywania danych
    switch config.scenario
        case 'vowels'
            use_vowels = true;
            use_complex = false;
        case 'commands'
            use_vowels = false;
            use_complex = true;
        case 'all'
            use_vowels = true;
            use_complex = true;
        otherwise
            logWarning('‚ö†Ô∏è Nieznany scenariusz: %s. U≈ºywam wszystkich danych.', config.scenario);
            use_vowels = true;
            use_complex = true;
    end
    
    % Wczytanie danych audio z automatycznym preprocessingiem
    [X, Y, labels, successful_loads, failed_loads] = loadAudioData(...
        config.noise_level, config.num_samples, use_vowels, use_complex, config.normalize_features);
    
    logInfo('‚úÖ Wczytano %d pr√≥bek (%d nieudanych) z %d kategorii', ...
        successful_loads, failed_loads, length(labels));
    
    % Sprawdzenie, czy mamy wystarczajƒÖcƒÖ ilo≈õƒá danych
    if successful_loads < 10
        logError('‚ùå Za ma≈Ço danych do trenowania! Wczytano tylko %d pr√≥bek.', successful_loads);
        error('Za ma≈Ço danych do trenowania! Wczytano tylko %d pr√≥bek.', successful_loads);
    end
    
    results.data_loading_time = toc(step1_time);
    logSuccess('‚úÖ Dane wczytane pomy≈õlnie w %.2f sekund', results.data_loading_time);
catch e
    logError('‚ùå B≈ÇƒÖd podczas wczytywania danych: %s', e.message);
    error('B≈ÇƒÖd podczas wczytywania danych: %s', e.message);
end

% Zapisanie podstawowych informacji o danych
results.data_info = struct(...
    'num_samples', successful_loads, ...
    'num_failed', failed_loads, ...
    'num_features', size(X, 2), ...
    'num_classes', size(Y, 2), ...
    'class_names', {labels});

logInfo('üìä Zestawienie danych: %d pr√≥bek, %d cech, %d klas', ...
    successful_loads, size(X, 2), size(Y, 2));

% =========================================================================
% KROK 2: POR√ìWNANIE SIECI NEURONOWYCH
% =========================================================================

logInfo('üß† Krok 2: Por√≥wnanie typ√≥w sieci neuronowych...');
step2_time = tic;

% Przekazanie konfiguracji do por√≥wnania sieci
comparison_config = config; % Wszystkie parametry

logInfo('üîç Rozpoczynam proces por√≥wnania i optymalizacji sieci...');

% Wywo≈Çanie funkcji por√≥wnujƒÖcej sieci
[comparison_results] = compareNetworks(X, Y, labels, comparison_config);

% Zapisanie wynik√≥w por√≥wnania
results.comparison = comparison_results;

% Okre≈õlenie zwyciƒôskiego typu sieci
winner_type = comparison_results.comparison.winner;
logSuccess('üèÜ Zwyciƒôski typ sieci: %s (dok≈Çadno≈õƒá: %.2f%%)', ...
    winner_type, comparison_results.patternnet.evaluation.accuracy * 100);

if ~strcmp(winner_type, 'tie')
    winner_accuracy = comparison_results.comparison.accuracy_gain * 100;
    logSuccess('üèÜ Przewaga nad drugim typem: %.2f%%', winner_accuracy);
end

% Okre≈õlenie najlepszej sieci (do zwr√≥cenia jako wynik funkcji)
if strcmp(winner_type, 'patternnet')
    best_net = comparison_results.patternnet.net;
    best_tr = comparison_results.patternnet.tr;
    best_accuracy = comparison_results.patternnet.evaluation.accuracy;
    best_params = comparison_results.patternnet.results.best_params;
else
    best_net = comparison_results.feedforwardnet.net;
    best_tr = comparison_results.feedforwardnet.tr;
    best_accuracy = comparison_results.feedforwardnet.evaluation.accuracy;
    best_params = comparison_results.feedforwardnet.results.best_params;
end

% Zapisanie czasu por√≥wnania sieci
results.comparison_time = toc(step2_time);
logInfo('‚è± Czas por√≥wnania sieci: %.2f sekund', results.comparison_time);

% =========================================================================
% KROK 3: PODSUMOWANIE WYNIK√ìW
% =========================================================================

% Ca≈Çkowity czas wykonania
results.total_time = toc(total_time);
logSuccess('‚úÖ Ca≈Çy proces zako≈Ñczony w %.2f sekund', results.total_time);

% Podsumowanie wynik√≥w
logInfo('üìã PODSUMOWANIE POR√ìWNANIA:');
logInfo('   Scenariusz: %s', config.scenario);
logInfo('   Metoda optymalizacji: %s', config.optimization_method);
logInfo('   Zwyciƒôzca: %s (dok≈Çadno≈õƒá: %.2f%%)', winner_type, best_accuracy * 100);

if ~strcmp(winner_type, 'tie')
    logInfo('   Przewaga dok≈Çadno≈õci: %.2f%%', comparison_results.comparison.accuracy_gain * 100);
end

% Z≈Çote parametry dla obu sieci
if comparison_results.comparison.pattern_golden
    logSuccess('‚úÖ Sieƒá patternnet osiƒÖgnƒô≈Ça z≈Çoty pr√≥g (‚â•%.0f%%)', config.golden_accuracy * 100);
end

if comparison_results.comparison.feedforward_golden
    logSuccess('‚úÖ Sieƒá feedforwardnet osiƒÖgnƒô≈Ça z≈Çoty pr√≥g (‚â•%.0f%%)', config.golden_accuracy * 100);
end

% Najlepsze parametry zwyciƒôskiej sieci
logInfo('üìä Najlepsze parametry dla %s:', winner_type);
logInfo('   Warstwy ukryte: %s', mat2str(best_params.hidden_layers));
logInfo('   Funkcja aktywacji: %s', best_params.activation_function);
logInfo('   Algorytm uczenia: %s (lr=%.5f)', best_params.training_algorithm, best_params.learning_rate);
logInfo('   Liczba epok: %d', best_params.max_epochs);

% Podsumowanie metryk dla zwyciƒôskiej sieci
if strcmp(winner_type, 'patternnet')
    eval_results = comparison_results.patternnet.evaluation;
else
    eval_results = comparison_results.feedforwardnet.evaluation;
end

logInfo('üìà Metryki dla zwyciƒôskiej sieci:');
logInfo('   Dok≈Çadno≈õƒá: %.2f%%', eval_results.accuracy * 100);
logInfo('   Precyzja: %.2f%%', eval_results.macro_precision * 100);
logInfo('   Czu≈Ço≈õƒá: %.2f%%', eval_results.macro_recall * 100);
logInfo('   F1-score: %.2f%%', eval_results.macro_f1 * 100);
logInfo('   Czas predykcji: %.4f s', eval_results.prediction_time);

logInfo('   Czas ca≈Çkowity: %.2f sekund', results.total_time);

% Zapisanie finalnych wynik√≥w do struktury zwrotnej
results.best_accuracy = best_accuracy;
results.best_params = best_params;
results.best_network_type = winner_type;

end

function result = iif(condition, true_value, false_value)
% Prosty odpowiednik operatora ?: z innych jƒôzyk√≥w
if condition
    result = true_value;
else
    result = false_value;
end
end