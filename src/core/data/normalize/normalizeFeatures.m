function [normalized_data, norm_params] = normalizeFeatures(data_matrix)
% NORMALIZEFEATURES Normalizacja cech do zakresu [-1, 1] (min-max)
%
% Sk≈Çadnia:
%   [normalized_data, norm_params] = normalizeFeatures(data_matrix)
%
% Argumenty:
%   data_matrix - macierz danych [pr√≥bki √ó cechy]
%
% Zwraca:
%   normalized_data - znormalizowana macierz [pr√≥bki √ó cechy]
%   norm_params - struktura zawierajƒÖca parametry normalizacji (do p√≥≈∫niejszego u≈ºycia)
%     - min_values: minimalne warto≈õci cech
%     - max_values: maksymalne warto≈õci cech

% Inicjalizacja macierzy wynikowej
normalized_data = zeros(size(data_matrix));

% Parametry normalizacji do p√≥≈∫niejszego u≈ºycia
norm_params = struct();
min_values = zeros(1, size(data_matrix, 2));
max_values = zeros(1, size(data_matrix, 2));

logInfo('üî¢ Normalizacja %d cech do zakresu [-1, 1] (min-max)...', size(data_matrix, 2));

% Normalizacja ka≈ºdej cechy osobno
for col = 1:size(data_matrix, 2)
    feature_values = data_matrix(:, col);
    
    feat_min = min(feature_values);
    feat_max = max(feature_values);
    
    % Zabezpieczenie przed dzieleniem przez zero
    if feat_max == feat_min
        feat_max = feat_min + eps; % Unikamy dzielenia przez zero
        logWarning('‚ö†Ô∏è Cecha %d ma sta≈ÇƒÖ warto≈õƒá - u≈ºywam eps jako dzielnik', col);
    end
    
    min_values(col) = feat_min;
    max_values(col) = feat_max;
    
    % Normalizacja min-max do zakresu [-1, 1]
    normalized_data(:, col) = 2 * (feature_values - feat_min) / (feat_max - feat_min) - 1;
end

% Obs≈Çuga warto≈õci niesko≈Ñczonych i NaN
if any(~isfinite(normalized_data(:)))
    logWarning('‚ö†Ô∏è Wykryto niesko≈Ñczone warto≈õci po normalizacji - zastƒôpujƒô zerami');
    normalized_data(~isfinite(normalized_data)) = 0;
end

% Zapisanie parametr√≥w normalizacji
norm_params.min_values = min_values;
norm_params.max_values = max_values;

logSuccess('‚úÖ Normalizacja zako≈Ñczona. Zakres warto≈õci: [%.4f, %.4f]', ...
    min(normalized_data(:)), max(normalized_data(:)));
end