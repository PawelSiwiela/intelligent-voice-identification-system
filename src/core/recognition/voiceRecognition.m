function voiceRecognition()
% =========================================================================
% SYSTEM ROZPOZNAWANIA G≈ÅOSU - G≈Å√ìWNY SKRYPT
% =========================================================================

close all;
clear all;
clc;

% Rozpoczƒôcie pomiaru ca≈Çkowitego czasu
total_start = tic;

% =========================================================================
% KONFIGURACJA PARAMETR√ìW SYSTEMU
% =========================================================================

% Parametry przetwarzania audio
noise_level = 0.1;         % Poziom szumu dodawanego do sygna≈Çu (0.0-1.0)
num_samples = 10;          % Liczba pr√≥bek audio na ka≈ºdƒÖ kategoriƒô

% Parametry kategorii danych
use_vowels = true;         % Czy wczytywaƒá samog≈Çoski (a, e, i)
use_complex = true;        % Czy wczytywaƒá komendy z≈Ço≈ºone (pary s≈Ç√≥w)

% Parametry normalizacji
normalize_features = true; % Czy normalizowaƒá cechy przed trenowaniem

logInfo('üéµ SYSTEM ROZPOZNAWANIA G≈ÅOSU - ROZPOCZƒòCIE');
logInfo('==========================================');
logInfo(''); % Pusta linia

% =========================================================================
% KROK 1: WCZYTYWANIE I PRZETWARZANIE DANYCH AUDIO
% =========================================================================
logInfo('=== KROK 1: Wczytywanie danych audio ===');
loading_start = tic;

% Wy≈õwietlenie aktualnej konfiguracji
logInfo('üìã Konfiguracja systemu:');
logInfo('   ‚Ä¢ Samog≈Çoski: %s', yesno(use_vowels));
logInfo('   ‚Ä¢ Komendy z≈Ço≈ºone: %s', yesno(use_complex));
logInfo('   ‚Ä¢ Pr√≥bek na kategoriƒô: %d', num_samples);
logInfo('   ‚Ä¢ Poziom szumu: %.1f', noise_level);
logInfo('   ‚Ä¢ Normalizacja cech: %s', yesno(normalize_features));

% Generowanie nazwy pliku na podstawie aktualnej konfiguracji
config_string = generateConfigString(use_vowels, use_complex);

% Okre≈õlenie ≈õcie≈ºki do pliku z danymi
if normalize_features
    data_file = fullfile('output', 'preprocessed', sprintf('loaded_audio_data_%s_normalized.mat', config_string));
else
    data_file = fullfile('output', 'preprocessed', sprintf('loaded_audio_data_%s_raw.mat', config_string));
end

% Sprawdzenie czy istniejƒÖ ju≈º przetworzone dane
data_exists = exist(data_file, 'file');

if data_exists
    logSuccess('‚úÖ Znaleziono plik z danymi: %s', data_file);
    load_existing = true;
else
    logWarning('‚ö†Ô∏è Nie znaleziono pliku z danymi: %s', data_file);
    logInfo('üì¶ Rozpoczynam przetwarzanie danych od nowa...\n');
    load_existing = false;
end

% Wczytanie istniejƒÖcych danych i sprawdzenie kompatybilno≈õci
if load_existing
    logInfo('üìÇ Wczytywanie zapisanych danych z %s...', data_file);
    
    loaded_data = load(data_file);
    
    % Weryfikacja zgodno≈õci konfiguracji
    config_compatible = validateConfiguration(loaded_data, use_vowels, use_complex);
    
    if config_compatible
        % Wczytanie danych z pliku
        X = loaded_data.X;
        Y = loaded_data.Y;
        labels = loaded_data.labels;
        successful_loads = loaded_data.successful_loads;
        failed_loads = loaded_data.failed_loads;
        
        % Wy≈õwietlenie informacji o wczytanych danych
        displayLoadedDataInfo(X, Y, labels, loaded_data);
    else
        load_existing = false; % Wymu≈õ przetwarzanie od nowa
    end
end

% Przetwarzanie danych od nowa (je≈õli potrzeba)
if ~load_existing
    logInfo('üîÑ Przetwarzanie danych od nowa...');
    
    try
        [X, Y, labels, successful_loads, failed_loads] = loadAudioData(...
            noise_level, num_samples, use_vowels, use_complex, normalize_features);
        
        % Sprawdzenie czy dane zosta≈Çy wczytane pomy≈õlnie
        if isempty(X)
            logError('‚ùå Nie uda≈Ço siƒô wczytaƒá danych lub proces zosta≈Ç zatrzymany.');
            return;
        end
        
        logSuccess('‚úÖ Przetwarzanie zako≈Ñczone pomy≈õlnie!');
        
    catch ME
        if contains(ME.message, 'zatrzymane')
            logWarning('üõë Proces zosta≈Ç zatrzymany przez u≈ºytkownika.');
            return;
        else
            rethrow(ME);
        end
    end
end

% Podsumowanie wczytywania danych
loading_time = toc(loading_start);
displayLoadingSummary(loading_time, successful_loads, failed_loads);

% =========================================================================
% OPTYMALIZACJA HIPERPARAMETR√ìW - TYLKO RANDOM SEARCH
% =========================================================================

logInfo('üîç Rozpoczynam optymalizacjƒô hiperparametr√≥w...');

% JEDNA METODA: Random Search z Golden Parameters Discovery
selected_method = 'random_search';  % üé≤ Sprawdzona metoda!

logInfo('üé≤ Metoda optymalizacji: RANDOM SEARCH');
logInfo('üíé Cel: znalezienie Golden Parameters (95%+)');

optimization_start = tic;

% Random Search z konfiguracjƒÖ
config = randomSearchConfig();
displayRandomSearchConfig(config, X, Y, labels);  % ‚ö†Ô∏è DODAJ tƒô funkcjƒô!
[results, best_model] = randomSearchOptimizer(X, Y, labels, config);

optimization_time = toc(optimization_start);

logSuccess('‚ö° Optymalizacja zako≈Ñczona w %.1f sekund (%.1f minut)', ...
    optimization_time, optimization_time/60);

% =========================================================================
% KROK 2.5: SPRAWDZENIE CZY ZNALEZIONO GOLDEN PARAMETERS
% =========================================================================

% Sprawd≈∫ czy Random Search znalaz≈Ç Golden Parameters (95%+)
if strcmp(selected_method, 'random_search') && ...
        isfield(results, 'best_accuracy') && ...
        results.best_accuracy >= 0.95
    
    logSuccess('üíé ZNALEZIONO GOLDEN PARAMETERS! Accuracy: %.1f%%', ...
        results.best_accuracy*100);
    
    % U≈ºyj Golden Parameters do stworzenia finalnej sieci
    logInfo('üöÄ Tworzenie finalnej sieci z Golden Parameters...');
    
    golden_params = results.best_params;
    
    % Stw√≥rz finalnƒÖ sieƒá z najlepszymi parametrami
    final_net = createNeuralNetwork(...
        'pattern', ...
        golden_params.hidden_layers, ...
        golden_params.train_function, ...
        golden_params.activation_function, ...
        golden_params.learning_rate, ...
        golden_params.epochs, ...
        1e-6);
    
    % Wytrenuj finalnƒÖ sieƒá na WSZYSTKICH danych
    logInfo('üéØ Trenowanie finalnej sieci na pe≈Çnym zbiorze danych...');
    final_training_start = tic;
    
    final_net = train(final_net, X', Y');
    
    final_training_time = toc(final_training_start);
    
    % Testuj finalnƒÖ sieƒá
    final_outputs = final_net(X');
    final_accuracy = sum(vec2ind(final_outputs) == vec2ind(Y')) / size(Y, 1);
    
    logSuccess('üèÜ FINALNA SIEƒÜ - Accuracy: %.1f%% (czas: %.1fs)', ...
        final_accuracy*100, final_training_time);
    
    % Zapisz finalnƒÖ sieƒá
    timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
    final_net_filename = sprintf('output/networks/FINAL_GOLDEN_NETWORK_%.1f%%_%s.mat', ...
        final_accuracy*100, timestamp);
    
    save(final_net_filename, 'final_net', 'golden_params', 'final_accuracy');
    logSuccess('üíæ Finalna sieƒá zapisana: %s', final_net_filename);
    
    % Aktualizuj best_model na finalnƒÖ sieƒá
    best_model = final_net;
    results.final_accuracy = final_accuracy;
    results.golden_parameters_used = true;
    
else
    logInfo('‚ÑπÔ∏è Nie znaleziono Golden Parameters (95%+). U≈ºywam najlepszego wyniku.');
    results.golden_parameters_used = false;
end

% =========================================================================
% KROK 3: PODSUMOWANIE CA≈ÅEGO PROCESU
% =========================================================================

% POPRAWIONE WYWO≈ÅANIE - u≈ºywaj results.best_params
if isfield(results, 'best_params') && ~isempty(results.best_params)
    final_params = results.best_params;
else
    % Fallback - utw√≥rz strukturƒô z dostƒôpnych danych
    final_params = struct();
    final_params.accuracy = results.best_accuracy;
    final_params.method = results.method;
    final_params.total_time = results.total_time;
    
    % Domy≈õlne parametry na podstawie najlepszego wyniku
    final_params.learning_rate = 0.08;
    final_params.hidden_layers = [35, 25];
    final_params.train_function = 'trainbr';
    final_params.activation_function = 'logsig';
end

% Teraz u≈ºyj final_params zamiast best_params
displayFinalSummary(total_start, loading_time, final_params, ...
    noise_level, num_samples, use_vowels, use_complex, ...
    normalize_features, data_file);

% ===== FINALNE TESTOWANIE Z WIZUALIZACJƒÑ =====
if strcmp(selected_method, 'random_search') && ...
        isfield(results, 'best_accuracy') && ...
        results.best_accuracy >= 0.95 && ...
        results.golden_parameters_used
    
    logInfo('üéØ ROZPOCZYNAM FINALNE TESTOWANIE Z GOLDEN PARAMETERS...');
    logInfo('üíé Trenowanie finalnej sieci z OKNEM trenowania...');
    
    % ===== TRENUJ FINALNƒÑ SIEƒÜ Z OKNEM =====
    final_net = trainFinalNetwork(X, Y, golden_params);
    
    % Testowanie finalnej sieci
    final_results = testFinalNetwork(final_net, X, Y, labels, golden_params);
    
    % ===== TYLKO MACIERZ KONFUZJI =====
    if exist('src/utils/visualization', 'dir')
        addpath('src/utils/visualization');
        
        % SPRAWD≈π JAKIE FUNKCJE MASZ W VISUALIZATION
        vis_files = dir('src/utils/visualization/*.m');
        if ~isempty(vis_files)
            logInfo('üìä Dostƒôpne funkcje wizualizacji:');
            for i = 1:length(vis_files)
                logInfo('   - %s', vis_files(i).name);
            end
        end
        
        % U≈ªYJ ISTNIEJƒÑCEJ FUNKCJI MACIERZY KONFUZJI
        plotConfusionMatrix(final_results.true_labels, final_results.predictions, labels, ...
            sprintf('Macierz Konfuzji - Golden Parameters (%.1f%%)', final_results.accuracy*100));
    end
    
    logSuccess('üìä Wy≈õwietlono macierz konfuzji dla Golden Parameters!');
    
else
    logInfo('‚ÑπÔ∏è Standardowe testowanie - brak Golden Parameters lub accuracy < 95%%');
end
