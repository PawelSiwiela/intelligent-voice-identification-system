% src/core/optimization/optimizationController.m
function [best_net, best_params, results] = optimizationController(X, Y, labels, method)
% =========================================================================
% KONTROLER OPTYMALIZACJI - POPRAWIONE WYWO≈ÅANIA
% =========================================================================

if nargin < 4
    method = 'grid_search'; % Domy≈õlnie grid search
end

logInfo('üîç Uruchamianie optymalizacji: %s', method);

% Load configuration and run optimization
switch lower(method)
    case 'grid_search'
        config = gridSearchConfig();
        logInfo('üìä Grid Search: systematyczne przeszukiwanie');
        [best_net, best_params, results] = gridSearchOptimizer(X, Y, labels, config);
        
    case 'random_search'
        config = randomSearchConfig();
        logInfo('üé≤ Random Search: losowe przeszukiwanie');
        [best_net, best_params, results] = randomSearchOptimizer(X, Y, labels, config);
        
    case 'bayesian'
        logWarning('‚ö†Ô∏è Bayesian optimization - u≈ºywam Grid Search jako fallback');
        config = gridSearchConfig();
        [best_net, best_params, results] = gridSearchOptimizer(X, Y, labels, config);
        
    case 'genetic'
        logWarning('‚ö†Ô∏è Genetic algorithm - u≈ºywam Grid Search jako fallback');
        config = gridSearchConfig();
        [best_net, best_params, results] = gridSearchOptimizer(X, Y, labels, config);
        
    otherwise
        logError('‚ùå Nieznana metoda optymalizacji: %s', method);
        logInfo('üìã Dostƒôpne metody: grid_search, random_search');
        
        % Fallback do grid search
        logInfo('üîÑ U≈ºywam Grid Search jako fallback...');
        config = gridSearchConfig();
        [best_net, best_params, results] = gridSearchOptimizer(X, Y, labels, config);
end

logSuccess('‚úÖ Optymalizacja %s zako≈Ñczona pomy≈õlnie', method);

end