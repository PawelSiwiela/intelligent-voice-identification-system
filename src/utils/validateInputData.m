function validateInputData(X, Y, labels)
% =========================================================================
% WALIDACJA DANYCH WEJ≈öCIOWYCH DLA GRID SEARCH
% =========================================================================
% Sprawdza poprawno≈õƒá danych przed rozpoczƒôciem optymalizacji
% AUTOR: Pawe≈Ç Siwiela, 2025
% =========================================================================

logDebug('üîç Walidacja danych wej≈õciowych...');

% =========================================================================
% SPRAWDZENIE PODSTAWOWYCH WYMIAR√ìW
% =========================================================================

if isempty(X) || isempty(Y)
    error('‚ùå Dane wej≈õciowe X lub Y sƒÖ puste');
end

[num_samples_X, num_features] = size(X);
[num_samples_Y, num_classes] = size(Y);

% Sprawdzenie zgodno≈õci liczby pr√≥bek
if num_samples_X ~= num_samples_Y
    error('‚ùå Liczba pr√≥bek w X (%d) nie zgadza siƒô z Y (%d)', num_samples_X, num_samples_Y);
end

% Sprawdzenie zgodno≈õci liczby klas
if length(labels) ~= num_classes
    error('‚ùå Liczba etykiet (%d) nie zgadza siƒô z liczbƒÖ klas w Y (%d)', length(labels), num_classes);
end

% =========================================================================
% SPRAWDZENIE TYPU I WARTO≈öCI DANYCH
% =========================================================================

if ~isnumeric(X) || ~isnumeric(Y)
    error('‚ùå Macierze X i Y muszƒÖ byƒá numeryczne');
end

% Sprawdzenie NaN i Inf
if any(isnan(X(:))) || any(isinf(X(:)))
    error('‚ùå Macierz X zawiera warto≈õci NaN lub Inf');
end

if any(isnan(Y(:))) || any(isinf(Y(:)))
    error('‚ùå Macierz Y zawiera warto≈õci NaN lub Inf');
end

% =========================================================================
% SPRAWDZENIE FORMATU ONE-HOT
% =========================================================================

% Sprawdzenie czy Y to one-hot encoding
Y_sums = sum(Y, 2);
if ~all(abs(Y_sums - 1) < 1e-10)
    logWarning('‚ö†Ô∏è Y mo≈ºe nie byƒá w formacie one-hot encoding');
end

% Sprawdzenie czy ka≈ºda klasa ma pr√≥bki
class_counts = sum(Y, 1);
empty_classes = find(class_counts == 0);
if ~isempty(empty_classes)
    logWarning('‚ö†Ô∏è Niekt√≥re klasy nie majƒÖ pr√≥bek');
end

% =========================================================================
% SPRAWDZENIE WYMAGA≈É DLA CV
% =========================================================================

min_samples_per_class = min(class_counts);
if min_samples_per_class < 3
    logWarning('‚ö†Ô∏è Niekt√≥re klasy majƒÖ <3 pr√≥bki - mo≈ºe wp≈ÇynƒÖƒá na cross-validation');
end

if num_samples_X < 10
    logWarning('‚ö†Ô∏è Bardzo ma≈Ço pr√≥bek (%d) - wyniki mogƒÖ byƒá niewiarygodne', num_samples_X);
end

% =========================================================================
% PODSUMOWANIE
% =========================================================================

logSuccess('‚úÖ Walidacja danych zako≈Ñczona pomy≈õlnie');
logDebug('üìä Pr√≥bki: %d, Cechy: %d, Klasy: %d', num_samples_X, num_features, num_classes);
logDebug('üìä Min/Max pr√≥bek per klasa: %d/%d', min(class_counts), max(class_counts));

end